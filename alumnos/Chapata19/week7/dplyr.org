#+TITLE: Introducción a R
#+AUTHOR: Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+DATE: 8-Oct-2020

#+LANGUAGE:  es
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: moon
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_TRANS: cube
#+REVEAL_SLIDE_NUMBER: t
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Matemáticas Computacionales">
#+PROPERTY: header-args:R  :session *R*  :results output org :exports both :eval yes


* Dplyr

*** Instalar paquetes.
#+BEGIN_SRC elisp fix :exports none
(defun org-babel-R-evaluate-session
    (session body result-type result-params column-names-p row-names-p)
  "Evaluate BODY in SESSION.
If RESULT-TYPE equals `output' then return standard output as a
string.  If RESULT-TYPE equals `value' then return the value of the
last statement in BODY, as elisp."
  (cl-case result-type
    (value
     (with-temp-buffer
       (insert (org-babel-chomp body))
       (let ((ess-local-process-name
              (process-name (get-buffer-process session)))
             (ess-eval-visibly-p nil))
         (ess-eval-buffer nil)))
     (let ((tmp-file (org-babel-temp-file "R-")))
       (org-babel-comint-eval-invisibly-and-wait-for-file
        session tmp-file
        (format org-babel-R-write-object-command
                (if row-names-p "TRUE" "FALSE")
                (if column-names-p
                    (if row-names-p "NA" "TRUE")
                  "FALSE")
                ".Last.value" (org-babel-process-file-name tmp-file 'noquote)))
       (org-babel-R-process-value-result
        (org-babel-result-cond result-params
          (with-temp-buffer
            (insert-file-contents tmp-file)
            (org-babel-chomp (buffer-string) "\n"))
          (org-babel-import-elisp-from-file tmp-file '(16)))
        column-names-p)))
    (output
     ;; strip ansi-color-control-seq-regexp from output!!
     (replace-regexp-in-string
      ansi-color-control-seq-regexp ""
      (mapconcat
       'org-babel-chomp
       (butlast
        (delq nil
              (mapcar
               (lambda (line) (when (> (length line) 0) line))
               (mapcar
                (lambda (line) ;; cleanup extra prompts left in output
                  (if (string-match
                       "^\\([>+.]\\([ ][>.+]\\)*[ ]\\)"
                       (car (split-string line "\n")))
                      (substring line (match-end 1))
                    line))
                (org-babel-comint-with-output (session org-babel-R-eoe-output)
                  (insert (mapconcat 'org-babel-chomp
                                     (list body org-babel-R-eoe-indicator)
                                     "\n"))
                  (inferior-ess-send-input)))))) "\n")))))

#+END_SRC

#+RESULTS:
: org-babel-R-evaluate-session

    Para empezar: 
    #+BEGIN_SRC R
    if(!require(dplyr, quietly = TRUE, warn.conflicts = FALSE) ){
        install.packages('dplyr',
	    dependencies = TRUE, 
	    repos = "http://cran.us.r-project.org")
    }
    if(!require(nycflights13, quietly = TRUE, warn.conflicts = FALSE) ){
        install.packages('nycflights13', 
	    dependencies = TRUE, 
	    repos = "http://cran.us.r-project.org")
    }
    #+END_SRC

    #+RESULTS:
    #+BEGIN_SRC org
    #+END_SRC


*** ¡Exploremos un poco!
    #+BEGIN_SRC R 
    library(dplyr)
    library(nycflights13)
    head(flights)
    #+END_SRC
*** ¡Exploremos un poco!

    #+BEGIN_SRC R
    class(flights)
    #+END_SRC 

*** ¡Exploremos un poco!

    #+BEGIN_SRC R
    str(flights)
    #+END_SRC 

*** Verbos
    Dplyr tiene verbos que usualmente aplicamos a las bases de datos. 
    - ~filter()~
    - ~slice()~
    - ~select()~
    - ~rename()~
    - ~distinct()~
    - ~mutate()~
    - ~transmute()~
    - ~summarise()~
    - ~sample_n()~
    - ~sample_frac()~

* Verbos
   Usos y costumbres
*** ~filter~
    Filtra el data frame con base en las distintas variables que tengas. 
    #+BEGIN_SRC R :results output
    filter(flights, month == 10, day == 31)
    #+END_SRC

    #+RESULTS:
    #+begin_src org
    # A tibble: 922 x 19
	year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
       <
    <
    <
       <
	     <
	<
       <
	     <int>
     1  2013    10    31      458            500        -2      638            651
     2  2013    10    31      513            517        -4      824            757
     3  2013    10    31      542            545        -3      818            855
     4  2013    10    31      543            545        -2      852            827
     5  2013    10    31      550            600       -10      824            854
     6  2013    10    31      552            600        -8      703            659
     7  2013    10    31      553            600        -7      649            701
     8  2013    10    31      553            600        -7      925            943
     9  2013    10    31      554            600        -6      713            711
    10  2013    10    31      554            600        -6      834            856
    # … with 912 more rows, and 11 more variables: arr_delay <dbl>, carrier <chr>,
    #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,
    #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>
    #+end_src


*** ~slice~
    Filtra y selecciona en función del número de renglón. 
    #+BEGIN_SRC R 
    slice(flights, 1:10)
    #+END_SRC
*** ~arrange~
    Ordena los renglones del data frame en función de distintas variables a elegir. 
    #+BEGIN_SRC R
    arrange(flights, year, desc(month), day)
    #+END_SRC

*** ~select~
    Selecciona columnas de un data frame, para quedarnos con un subconjunto de las mismas (como en un select de SQL)

    #+BEGIN_SRC R
    select(flights, year, month, day, carrier, origin, dest)
    #+END_SRC

*** ~select~
    #+BEGIN_SRC R
    select(flights, year:day)
    #+END_SRC

*** ~select~
    #+BEGIN_SRC R
    select(flights, -year)
    #+END_SRC
    Se pueden usar funciones para /matchear/ como ~contains()~, ~starts_with()~, etc. 
    También se pueden renombrar variables en el proceso. 
*** ~rename~
    La manera más limpia de renombrar variables. 
    #+BEGIN_SRC R
    #rename(flights, dest = origin)
    rename(flights, mes = month)
    #+END_SRC

    #+RESULTS:
    #+BEGIN_SRC org
    # A tibble: 336,776 x 19
	year   mes   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
       <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>
     1  2013     1     1      517            515         2      830            819
     2  2013     1     1      533            529         4      850            830
     3  2013     1     1      542            540         2      923            850
     4  2013     1     1      544            545        -1     1004           1022
     5  2013     1     1      554            600        -6      812            837
     6  2013     1     1      554            558        -4      740            728
     7  2013     1     1      555            600        -5      913            854
     8  2013     1     1      557            600        -3      709            723
     9  2013     1     1      557            600        -3      838            846
    10  2013     1     1      558            600        -2      753            745
    # ... with 336,766 more rows, and 11 more variables: arr_delay <dbl>,
    #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,
    #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>
    #+END_SRC

*** ~distinct~
    Quita los duplicados del data frame. 
    #+BEGIN_SRC R
    distinct(select(flights, origin, dest))
    #+END_SRC

*** ~mutate~
    Genera nuevas variables, se pueden usar el resto de los renglones para crear nuevas variables:
    #+BEGIN_SRC R
    flights %>%
    mutate(
    speed=distance/ air_time * 60, 
    speed2 = speed*2
    )
    #+END_SRC

*** ~sumarize~
    Sirve para aplicar funciones a los renglones de la base de datos, particularmente útil con =group_by= para agrupaciones.
    #+BEGIN_SRC R
    summarise(flights,
    delay = mean(dep_delay, na.rm = TRUE))
    #+END_SRC

    #+RESULTS:
    #+BEGIN_SRC org
    # A tibble: 1 x 1
	 delay
	 <dbl>
    1 12.63907
    #+END_SRC

* Agrupaciones 
*** Group by 
Los verbos por si solos ya responden preguntas, sin embargo si los juntamos con agrupaciones puede llegar a ser bastante interesante. 
    #+BEGIN_SRC R
    flights %>% 
    group_by(month, day) %>%
    summarise(delay = mean(dep_delay, na.rm = TRUE)) %>% 
    arrange(desc(delay))
    #+END_SRC

    #+RESULTS:
    #+BEGIN_SRC org
    Source: local data frame [365 x 3]
    Groups: month [12]

       month   day    delay
       <int> <int>    <dbl>
    1      3     8 83.53692
    2      7     1 56.23383
    3      9     2 53.02955
    4      7    10 52.86070
    5     12     5 52.32799
    6      5    23 51.14472
    7      9    12 49.95875
    8      6    28 48.82778
    9      6    24 47.15742
    10     7    22 46.66705
    # ... with 355 more rows
    #+END_SRC
*** Preguntas:
- ¿Hay algún día de la semana que sea considerablemente mejor para volar?
- ¿Hay alguna aerolínea que tenga algún problema a nivel mes?
- ¿Hay algún avión problemático?
- ¿Hay algún destino/origen problemático?
- ¿Hay alguna correlación entre distancia y retrasos?
